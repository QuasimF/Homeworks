class CreditCard:
  """A consumer credit card."""
  
  def __init__(self, customer, bank, acnt, limit):
    """Create a new credit card instance.

    The initial balance is zero.

    customer  the name of the customer (e.g., 'John Bowman')
    bank      the name of the bank (e.g., 'California Savings')
    acnt      the acount identifier (e.g., '5391 0375 9387 5309')
    limit     credit limit (measured in dollars)
    """
    self._Customer = customer
    self._bank = bank
    self._Account = acnt
    self._limit = limit
    self._Balance = 0

#get customer
  def get_customer(self):
    """Return name of the customer."""
    return self._Customer

#getting account
  def get_account(self):
    """Return the card identifying number (typically stored as a string)."""
    return self._Account

 #getting bank      
  def get_bank(self):
    """Return the bank's name."""
    return self._bank

#getting limit
  def get_limit(self):
    """Return current credit limit."""
    return self._limit

#def charges
  def charge(self, price):
    """Charge given price to the card, assuming sufficient credit limit.

    Return True if charge was processed; False if charge was denied.
    """
    
    if price + self._balance > self._limit:  # if charge would exceed limit,
      return False                           # cannot accept charge
    else:
      self._balance += price
      return True


  def get_balance(self):
    """Return current balance."""
    return self._Balance

  def make_payment(self, amount):
    """Process customer payment that reduces balance."""
    self._balance -= amount


if __name__ == '__main__':


  wallet = []
                  
  wallet.append(CreditCard('John Bowman', 'California Savings',
                           '5391 0375 9387 5309', 2500) )
  wallet.append(CreditCard('John Bowman', 'California Federal',
                           '3485 0399 3395 1954', 3500) )
  wallet.append(CreditCard('John Bowman', 'California Finance',
                           '5391 0375 9387 5309', 5000) )

  for val in range(1, 17):
    wallet[0].charge(val)
    wallet[1].charge(2*val)
    wallet[2].charge(3*val)

  for c in range(3):
    print('Customer =', wallet[c].get_customer())
    print('Bank =', wallet[c].get_bank())
    print('Account =', wallet[c].get_account())
    print('Limit =', wallet[c].get_limit())
    print('Balance =', wallet[c].get_balance())
    
    while wallet[c].get_balance() > 100:
      wallet[c].make_payment(100)
      print('New balance =', wallet[c].get_balance())
    print()

################################################################################################
#as it can be seen that Customer, Account and Balance in line 14,16,18 are all capital in the beginning of each word while bank and limit starts with small capital. It is best 
#to have it all consistent so we would change it to be all small capital in the good code.

# the getters should always follow the order of the way the user first established them as we can see the order at which the user has assigned them is
#customer then bank then account then limit then balance however the def get_account comes first before def get_bank which shows inconsistensy.

#Another form of bad code is the comments found on line 20,25,30,35 and 40. It is obvious on what the def does and is not required to be commented